package com.codinginflow.mvvmtodo.di

import android.app.Application
import androidx.room.Room
import com.codinginflow.mvvmtodo.data.TaskDatabase
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob
import javax.inject.Qualifier
import javax.inject.Singleton

@Module
// ApplicationComponent class is autogenerated by dagger; contains dependencies needed
//TODO: !! APPLICATIONCOMPONENT IS DEPRECATED; USE SingletonComponent IF USING LATEST DEPENDENCIES
@InstallIn(ApplicationComponent::class)   // ApplicationComponent Deprecated
object AppModule {

    @Provides
    @Singleton
    fun provideDatabase( // function name named "provide..." is convention
        app: Application, // Application context is provided automatically by Dagger
        callback: TaskDatabase.Callback // Defined inject constructor in TaskDatabase
    ) = Room.databaseBuilder(app, TaskDatabase::class.java, "task_database")
            .fallbackToDestructiveMigration()
            .addCallback(callback)  // To create dummy data on database creation so use a callback to create the data before build creation
            .build()

    @Provides
    fun provideTaskDao(db: TaskDatabase) = db.taskDao()

    // This is how to create a CoroutineScope that lives as long as the application lives because it is declared as a singleton in our ApplicationComponent
    // Use this scope for long running operations throughout the whole app. By default a CoRoutine is cancelled if any of the child's fails.  To avoid this,
    // the `SupervisorJob()` is used.  If any of the child's fail, the other jobs keep running.
    @ApplicationScope   // ApplicationScope is our own created Annotation below
    @Provides
    @Singleton
    fun provideApplicationScope() = CoroutineScope(SupervisorJob())

}

// Creating own Annotation; This would help if later using more than one CoroutineScope to specify the one to use
@Retention(AnnotationRetention.RUNTIME)
@Qualifier
annotation class ApplicationScope